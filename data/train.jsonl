{"prompt": "How do I make a simple GET request using the requests library in Python?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nprint(f'Status Code: {response.status_code}')"}
{"prompt": "Show basic Python code to fetch data from 'https://httpbin.org/ip' with requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/ip')\nprint(f'Status Code: {response.status_code}')\nprint(f'My IP: {response.json().get(\"origin\")}')"}
{"prompt": "Generate a requests example for a GET request to 'https://httpbin.org/get'.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nprint(f'GET Request Status: {response.status_code}')"}
{"prompt": "Basic usage of requests.get() to check if a URL is reachable.", "completion": "import requests\n\ntry:\n    response = requests.get('https://httpbin.org/status/200', timeout=5)\n    response.raise_for_status() # Raise an exception for bad status codes (4xx or 5xx)\n    print('URL is reachable and returned success status.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error reaching URL: {e}')"}
{"prompt": "How to pass URL parameters in a GET request with Python requests?", "completion": "import requests\n\npayload = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.get('https://httpbin.org/get', params=payload)\nprint(f'Final URL sent: {response.url}')\nprint(f'Status Code: {response.status_code}')"}
{"prompt": "Send a GET request with query parameters {'search': 'python requests'} using requests.", "completion": "import requests\n\nparams = {'search': 'python requests'}\nresponse = requests.get('https://httpbin.org/get', params=params)\nprint(f'Status: {response.status_code}')\nprint(f'Args received: {response.json().get(\"args\")}')"}
{"prompt": "Example of using `params` in `requests.get`.", "completion": "import requests\n\nmy_params = {'id': 123, 'category': 'books'}\nresponse = requests.get('https://httpbin.org/get', params=my_params)\nprint(response.url)"}
{"prompt": "How can I send custom headers with a requests GET request?", "completion": "import requests\n\ncustom_headers = {'User-Agent': 'MyPythonApp/1.0', 'Accept': 'application/json'}\nresponse = requests.get('https://httpbin.org/headers', headers=custom_headers)\nprint(f'Status Code: {response.status_code}')\nprint(f'Headers received by server: {response.json().get(\"headers\")}')"}
{"prompt": "Set a User-Agent header in Python requests.", "completion": "import requests\n\nheaders = {'User-Agent': 'Mozilla/5.0 (compatible; MyApp/1.1)'}\nresponse = requests.get('https://httpbin.org/user-agent', headers=headers)\nprint(response.json())"}
{"prompt": "Provide an example of using the `headers` argument in requests.", "completion": "import requests\n\napi_headers = {'Authorization': 'Bearer YOUR_API_KEY'}\nresponse = requests.get('https://httpbin.org/bearer', headers=api_headers)\nprint(f'Status: {response.status_code}')\n# Note: httpbin.org/bearer doesn't actually validate the token, just checks presence"}
{"prompt": "How to send form data in a POST request using requests?", "completion": "import requests\n\npayload = {'username': 'john_doe', 'email': 'john@example.com'}\nresponse = requests.post('https://httpbin.org/post', data=payload)\nprint(f'Status Code: {response.status_code}')\nprint(f'Form data received: {response.json().get(\"form\")}')"}
{"prompt": "Python requests: POST a dictionary as form data.", "completion": "import requests\n\nform_data = {'field1': 'data1', 'field2': 'data2'}\nresponse = requests.post('https://httpbin.org/post', data=form_data)\nprint(f'Status: {response.status_code}')\nprint(f'Response Form: {response.json().get(\"form\")}')"}
{"prompt": "Example of `requests.post` with the `data` parameter.", "completion": "import requests\n\ndata_to_send = {'item_id': 'xyz789', 'quantity': 5}\nresponse = requests.post('https://httpbin.org/post', data=data_to_send)\nprint(response.request.body) # Shows the encoded body sent\nprint(response.status_code)"}
{"prompt": "How do I POST JSON data using the Python requests library?", "completion": "import requests\n\npayload = {'name': 'Demo User', 'is_active': True, 'roles': ['admin', 'editor']}\nresponse = requests.post('https://httpbin.org/post', json=payload)\nprint(f'Status Code: {response.status_code}')\nprint(f'JSON received by server: {response.json().get(\"json\")}')"}
{"prompt": "Send a dictionary as a JSON payload with requests.", "completion": "import requests\n\njson_data = {'id': 1, 'value': 'test data', 'nested': {'key': 'nested_value'}}\nresponse = requests.post('https://httpbin.org/post', json=json_data)\nprint(f'Status: {response.status_code}')\nprint(f'Content-Type sent: {response.request.headers[\"Content-Type\"]}')\nprint(f'Response JSON: {response.json().get(\"json\")}')"}
{"prompt": "Example of `requests.post` using the `json` argument.", "completion": "import requests\n\nmy_json = {\"widget\": {\"name\": \"foo\", \"price\": 10.50}}\nresponse = requests.post('https://httpbin.org/post', json=my_json)\nprint(response.json()['json'])"}
{"prompt": "How to make a PUT request in Python using requests?", "completion": "import requests\n\npayload = {'item_name': 'Updated Gadget', 'status': 'active'}\nresponse = requests.put('https://httpbin.org/put', data=payload)\nprint(f'PUT Status Code: {response.status_code}')\nprint(f'PUT Form data received: {response.json().get(\"form\")}')"}
{"prompt": "Example of `requests.put` to update data.", "completion": "import requests\n\nupdated_data = {'id': 99, 'description': 'This is the updated description.'}\nresponse = requests.put('https://httpbin.org/put', json=updated_data)\nprint(f'Status: {response.status_code}')\nprint(f'JSON received by PUT: {response.json().get(\"json\")}')"}
{"prompt": "How do you send a DELETE request with the requests library?", "completion": "import requests\n\nresponse = requests.delete('https://httpbin.org/delete')\nprint(f'DELETE Status Code: {response.status_code}')\n# Usually DELETE responses have minimal or no body"}
{"prompt": "Example of `requests.delete` in Python.", "completion": "import requests\n\nresource_id = 123\nurl = f'https://httpbin.org/delete?id={resource_id}' # Example: passing ID in URL\nresponse = requests.delete(url)\nprint(f'Status for deleting {resource_id}: {response.status_code}')"}
{"prompt": "How to get the response body as text using requests?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/html')\nprint('Response Text (first 100 chars):')\nprint(response.text[:100])"}
{"prompt": "Access the raw text content of an HTTP response in Python.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/robots.txt')\nif response.status_code == 200:\n    raw_text = response.text\n    print(raw_text)\nelse:\n    print(f'Failed with status: {response.status_code}')"}
{"prompt": "Example of using `response.text` with requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/base64/SFRUUEJJTiBpcyBhd2Vzb21l') # Base64 encoded text\n# response.text will contain the decoded text\nprint(f'Decoded text: {response.text}')"}
{"prompt": "How to parse a JSON response using requests?", "completion": "import requests\nimport json # for the exception\n\nresponse = requests.get('https://httpbin.org/json')\ntry:\n    data = response.json()\n    print('Parsed JSON data:')\n    print(data)\nexcept json.JSONDecodeError:\n    print('Response content was not valid JSON.')"}
{"prompt": "Get the response as a Python dictionary from JSON with requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get?show_env=1') # Endpoint returns JSON\nif response.headers.get('content-type') == 'application/json':\n    try:\n        json_dict = response.json()\n        print(f'Origin IP from JSON: {json_dict.get(\"origin\")}')\n    except requests.exceptions.JSONDecodeError:\n        print('Error decoding JSON')\nelse:\n    print('Response was not JSON')"}
{"prompt": "Example of using `response.json()` and accessing a key.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/uuid')\ntry:\n    uuid_data = response.json()\n    print(f'Generated UUID: {uuid_data.get(\"uuid\")}')\nexcept requests.exceptions.JSONDecodeError:\n    print('Failed to parse JSON response.')"}
{"prompt": "How to use a requests Session for persistent connections?", "completion": "import requests\n\nwith requests.Session() as session:\n    session.headers.update({'x-test-header': 'persistent'}) # Set header for the session\n    response1 = session.get('https://httpbin.org/headers')\n    print('First request headers seen by server:')\n    print(response1.json()['headers'])\n    response2 = session.get('https://httpbin.org/headers') # Header persists\n    print('\\nSecond request headers seen by server:')\n    print(response2.json()['headers'])"}
{"prompt": "Maintain cookies across requests using Python requests.", "completion": "import requests\n\nwith requests.Session() as s:\n    s.get('https://httpbin.org/cookies/set/mycookie/myvalue') # Server sets a cookie\n    response = s.get('https://httpbin.org/cookies') # Send request, session includes cookie\n    print('Cookies received by server on second request:')\n    print(response.json()['cookies'])"}
{"prompt": "Example of `requests.Session()` usage for multiple requests.", "completion": "import requests\n\ns = requests.Session()\nresp1 = s.get('https://httpbin.org/get')\nprint(f'Request 1 status: {resp1.status_code}')\nresp2 = s.post('https://httpbin.org/post', data={'key':'val'})\nprint(f'Request 2 status: {resp2.status_code}')\ns.close() # Close the session (optional if using 'with')"}
{"prompt": "How to perform HTTP Basic Authentication with requests?", "completion": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nresponse = requests.get('https://httpbin.org/basic-auth/user/password', auth=HTTPBasicAuth('user', 'password'))\nprint(f'Status Code: {response.status_code}')\nif response.status_code == 200:\n    print('Authentication successful.')\n    print(response.json())"}
{"prompt": "Send username and password using Python requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/basic-auth/test_user/test_pwd', auth=('test_user', 'test_pwd'))\nprint(f'Status: {response.status_code}')\nif response.ok:\n    print(f'Auth result: {response.json()}')"}
{"prompt": "Example of the `auth` parameter in requests for Basic Auth.", "completion": "import requests\n\nusername = 'admin'\npassword = 'secret_password'\nresponse = requests.get('https://httpbin.org/basic-auth/admin/secret_password', auth=(username, password))\nprint(f'Authenticated: {response.json().get(\"authenticated\")}')"}
{"prompt": "How to set a timeout for requests in Python?", "completion": "import requests\n\ntry:\n    # httpbin.org/delay/5 takes 5 seconds to respond\n    response = requests.get('https://httpbin.org/delay/5', timeout=3) # Timeout set to 3 seconds\n    print(f'Status: {response.status_code}')\nexcept requests.exceptions.Timeout:\n    print('Request timed out after 3 seconds.')\nexcept requests.exceptions.RequestException as e:\n    print(f'An error occurred: {e}')"}
{"prompt": "Limit the time a request waits using requests library.", "completion": "import requests\n\nresponse = None\ntry:\n    response = requests.get('https://httpbin.org/get', timeout=0.5) # Set a short timeout\n    print('Request completed within timeout.')\nexcept requests.exceptions.Timeout:\n    print('The request exceeded the 0.5s timeout.')\nfinally:\n    if response:\n        print(f'Final Status Code (if received): {response.status_code}')"}
{"prompt": "Example of the `timeout` parameter in `requests.get`.", "completion": "import requests\n\n# Timeout can be a float (connect + read timeout) or a tuple (connect_timeout, read_timeout)\ntry:\n    response = requests.get('https://httpbin.org/delay/2', timeout=(1.0, 1.5)) # 1s connect, 1.5s read\n    print('Request finished.')\nexcept requests.exceptions.Timeout as e:\n    print(f'Request timed out: {e}')"}
{"prompt": "How to check the status code of a response in requests?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/status/404')\nprint(f'The status code is: {response.status_code}')\nif response.status_code == 404:\n    print('Resource not found.')"}
{"prompt": "Verify if a request was successful using the status code.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nif 200 <= response.status_code < 300:\n    print(f'Success! Status code: {response.status_code}')\nelse:\n    print(f'Request failed with status code: {response.status_code}')"}
{"prompt": "Get the status code from a POST request response.", "completion": "import requests\n\nresponse = requests.post('https://httpbin.org/post', data={'a':1})\nstatus = response.status_code\nprint(f'POST request returned status: {status}')"}
{"prompt": "How to get response headers using requests?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/response-headers?Content-Type=text/plain&Server=MyServer')\nprint('Response Headers:')\nfor key, value in response.headers.items():\n    print(f'  {key}: {value}')"}
{"prompt": "Access a specific response header like 'Content-Type'.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/json')\ncontent_type = response.headers.get('Content-Type') # Use .get for case-insensitivity and default None\nprint(f'Content-Type Header: {content_type}')"}
{"prompt": "Read response headers dictionary in Python requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nheaders_dict = response.headers\nprint(f'Date header from response: {headers_dict.get(\"Date\")}')\nprint(f'Server header from response: {headers_dict.get(\"Server\")}')"}
{"prompt": "How to handle redirects in requests? (e.g., disable them)", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1', allow_redirects=False)\nprint(f'Status code without redirect: {response.status_code}') # Should be 302\nprint(f'Location header: {response.headers.get(\"Location\")}')"}
{"prompt": "Follow redirects automatically (default behavior).", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect-to?url=https://httpbin.org/get')\n# By default, allow_redirects is True\nprint(f'Final status code after redirect: {response.status_code}') # Should be 200\nprint(f'Final URL after redirect: {response.url}')"}
{"prompt": "Check redirect history using requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/absolute-redirect/3') # 3 redirects\nprint(f'Final URL: {response.url}')\nprint('Redirect History:')\nfor resp in response.history:\n    print(f'  Status: {resp.status_code}, URL: {resp.url}')"}
{"prompt": "How to send cookies with a request?", "completion": "import requests\n\nmy_cookies = {'visit_count': '5', 'user_preference': 'dark_mode'}\nresponse = requests.get('https://httpbin.org/cookies', cookies=my_cookies)\nprint('Cookies sent and received by server:')\nprint(response.json()['cookies'])"}
{"prompt": "Pass a dictionary of cookies using the `cookies` parameter.", "completion": "import requests\n\ncookies = dict(session_id='abc123xyz')\nresponse = requests.get('https://httpbin.org/cookies', cookies=cookies)\nprint(f'Status: {response.status_code}')\nprint(response.json()['cookies'])"}
{"prompt": "Basic error handling for requests.", "completion": "import requests\n\ntry:\n    response = requests.get('https://httpbin.org/delay/3', timeout=1)\n    response.raise_for_status() # Check for 4xx/5xx errors\n    print('Request successful')\nexcept requests.exceptions.Timeout:\n    print('Request timed out')\nexcept requests.exceptions.HTTPError as errh:\n    print(f'Http Error: {errh}')\nexcept requests.exceptions.ConnectionError as errc:\n    print(f'Error Connecting: {errc}')\nexcept requests.exceptions.RequestException as err:\n    print(f'Oops: Something Else: {err}')"}
{"prompt": "How to check if a request was successful using `response.ok`?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/status/201')\nif response.ok: # True if status_code < 400\n    print(f'Request was successful or redirect (Status: {response.status_code})')\nelse:\n    print(f'Request failed (Status: {response.status_code})')"}
{"prompt": "Raise an exception for bad status codes using `raise_for_status()`.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/status/500')\ntry:\n    response.raise_for_status()\n    print('Success!')\nexcept requests.exceptions.HTTPError as e:\n    print(f'HTTP Error occurred: {e}')\n    print(f'Status code was: {e.response.status_code}')"}
{"prompt": "How to get the elapsed time for a request using requests?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/delay/1') # Delays for 1 second\nprint(f'Request took: {response.elapsed.total_seconds()} seconds')"}
{"prompt": "Measure the round-trip time of a GET request with Python requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nelapsed_time = response.elapsed\nprint(f'Time elapsed for the request: {elapsed_time}')"}
{"prompt": "Example showing `response.elapsed` property in requests.", "completion": "import requests\n\nresp = requests.get('https://google.com') # Use a real site for varied timing\nprint(f'Status: {resp.status_code}')\nprint(f'Elapsed time: {resp.elapsed}')"}
{"prompt": "How can I inspect the request object that requests prepared?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get', params={'a': 1}, headers={'X-Custom': 'Test'}) \nprepared_request = response.request\nprint(f'Method: {prepared_request.method}')\nprint(f'URL: {prepared_request.url}')\nprint(f'Headers Sent: {prepared_request.headers}')"}
{"prompt": "Show the body of the request sent by requests.post.", "completion": "import requests\n\nresponse = requests.post('https://httpbin.org/post', data={'key': 'value'})\nprint(f'Request Body Sent: {response.request.body}')"}
{"prompt": "Access the original PreparedRequest object from a response.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nreq = response.request\nprint(f'The request method was: {req.method}')"}
{"prompt": "How to check the encoding requests used for `response.text`?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nprint(f'Detected Encoding: {response.encoding}')\n# You can override it if needed: response.encoding = 'utf-8'"}
{"prompt": "Get the character encoding detected by the requests library.", "completion": "import requests\n\nresponse = requests.get('https://www.python.org')\nprint(f'Response encoding for python.org: {response.encoding}')"}
{"prompt": "Example of accessing `response.encoding`.", "completion": "import requests\n\nresp = requests.get('https://httpbin.org/html')\nprint(f'Content-Type: {resp.headers.get(\"content-type\")}')\nprint(f'Encoding guessed by requests: {resp.encoding}')"}
{"prompt": "Inspect headers attached to the request object.", "completion": "import requests\n\nresponse = requests.post('https://httpbin.org/post', data={'a':'b'})\nrequest_headers = response.request.headers\nprint(f'Content-Type sent by default for form data: {request_headers.get(\"Content-Type\")}')\nprint(f'Content-Length sent: {request_headers.get(\"Content-Length\")}')"}
{"prompt": "How to get the request headers that were sent?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/headers', headers={'X-My-Header': 'Value123'})\nprint('Request Headers Sent:')\nfor key, value in response.request.headers.items():\n    print(f'  {key}: {value}')"}
{"prompt": "Example of using the `files` parameter in requests.", "completion": "import requests\n\nfiles = {'document': ('report.txt', 'This is the content of the report.', 'text/plain')}\nresponse = requests.post('https://httpbin.org/post', files=files)\nprint(response.json()['files'])"}
{"prompt": "Send multiple files in one POST request.", "completion": "import requests\n\nfiles = {\n    'file1': ('fileA.txt', 'Content A', 'text/plain'),\n    'file2': ('fileB.csv', 'col1,col2\\n1,2', 'text/csv')\n}\nresponse = requests.post('https://httpbin.org/post', files=files)\nprint(f'Status: {response.status_code}')\nprint(response.json()['files'])"}
{"prompt": "How to handle binary response content like images?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/image/png')\nif response.status_code == 200:\n    # response.content contains the raw bytes\n    print(f'Received {len(response.content)} bytes of image data.')\n    # Example: Save the image\n    # with open('image.png', 'wb') as f:\n    #     f.write(response.content)\nelse:\n    print(f'Failed to download image: {response.status_code}')"}
{"prompt": "Get raw bytes from a requests response using `response.content`.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/1024') # Get 1024 random bytes\nraw_bytes = response.content\nprint(f'Type of content: {type(raw_bytes)}')\nprint(f'Length of content: {len(raw_bytes)} bytes')"}
{"prompt": "Example for downloading binary data (e.g., a PDF) with requests.", "completion": "import requests\n\n# Replace with an actual PDF URL if needed\nurl = 'https://httpbin.org/bytes/5000' # Using bytes endpoint as placeholder\nresponse = requests.get(url)\nif response.ok:\n    print(f'Downloaded {len(response.content)} bytes.')\n    # Process the bytes (e.g., save to file)\nelse:\n    print(f'Download failed: {response.status_code}')"}
{"prompt": "How to use HTTP proxies with the requests library?", "completion": "import requests\n\nproxies = {\n  'http': 'http://10.10.1.10:3128',\n  'https': 'http://10.10.1.10:1080', # Can be http for https requests too\n}\n\ntry:\n    response = requests.get('https://httpbin.org/ip', proxies=proxies, timeout=10)\n    print('Request successful via proxy.')\n    print(f'IP seen by server (should be proxy IP): {response.json().get(\"origin\")}')\nexcept requests.exceptions.ProxyError as e:\n    print(f'Proxy Error: {e}')\nexcept requests.exceptions.RequestException as e:\n    print(f'Request failed: {e}')"}
{"prompt": "Set HTTP and HTTPS proxies for requests.", "completion": "import requests\n\nhttp_proxy = 'http://proxy.example.com:8080'\nhttps_proxy = 'https://secureproxy.example.com:8443'\n\nproxies = {\n    'http': http_proxy,\n    'https': https_proxy,\n}\n\n# This request will use the https_proxy\n# response = requests.get('https://httpbin.org/ip', proxies=proxies)\n# print(response.json())\n# This example won't run without real proxies, showing structure only.\nprint('Proxy dictionary created:', proxies)"}
{"prompt": "Example of using the `proxies` argument in requests.", "completion": "import requests\n\n# Example using SOCKS proxy (requires 'requests[socks]' installed)\n# proxies = {\n#     'http': 'socks5://user:pass@host:port',\n#     'https': 'socks5://user:pass@host:port'\n# }\n\nproxies_example = {'https': 'http://localhost:8888'} # Example for a local debugging proxy like Fiddler/Charles\ntry:\n    # response = requests.get('https://httpbin.org/ip', proxies=proxies_example, verify=False) # Often need verify=False with local proxies\n    print('Code shows structure for using proxies dict.')\nexcept Exception as e:\n    print(f'Proxy connection likely failed: {e}')"}
{"prompt": "How to disable SSL certificate verification in requests (use with caution!)?", "completion": "import requests\n\n# WARNING: Disabling SSL verification is insecure and should be avoided in production.\n# Useful only for specific testing scenarios against servers with self-signed certs.\ntry:\n    response = requests.get('https://self-signed.badssl.com/', verify=False)\n    print(f'Request to site with bad SSL (verify=False) Status: {response.status_code}')\nexcept requests.exceptions.SSLError as e:\n    print(f'SSL Error (This should not happen with verify=False): {e}')\nexcept requests.exceptions.RequestException as e:\n    print(f'Other Error: {e}')"}
{"prompt": "Example of setting `verify=False` in requests.", "completion": "import requests\nimport warnings\nfrom urllib3.exceptions import InsecureRequestWarning\n\n# Suppress only the single warning from urllib3 needed.\nwarnings.simplefilter('ignore', InsecureRequestWarning)\n\n# response = requests.get('https://expired.badssl.com/', verify=False)\n# print(f'Status with verify=False: {response.status_code}')\nprint('Code shows how to use verify=False and suppress warnings.')"}
{"prompt": "Provide path to a custom CA bundle for requests.", "completion": "import requests\n\n# Assume 'my_custom_ca.crt' exists\nca_bundle_path = './my_custom_ca.crt'\n\ntry:\n    # response = requests.get('https://internal.site.com', verify=ca_bundle_path)\n    # print(f'Status using custom CA: {response.status_code}')\n    print(f'Code shows structure for using verify= with path: {ca_bundle_path}')\nexcept requests.exceptions.SSLError as e:\n    print(f'SSL Error (check CA bundle or path): {e}')\nexcept FileNotFoundError:\n    print(f'Error: CA bundle file not found at {ca_bundle_path}')"}
{"prompt": "How to handle different status codes gracefully?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/status/403')\n\nif response.status_code == 200:\n    print('Success!')\n    # Process data: data = response.json()\nelif response.status_code == 404:\n    print('Resource not found.')\nelif response.status_code == 403:\n    print('Forbidden - Access denied.')\nelif response.status_code >= 500:\n    print('Server error occurred.')\nelse:\n    print(f'Received unexpected status code: {response.status_code}')"}
{"prompt": "Check if status code is 4xx (Client Error) or 5xx (Server Error).", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/status/503')\n\nif 400 <= response.status_code < 500:\n    print(f'Client Error: {response.status_code}')\nelif 500 <= response.status_code < 600:\n    print(f'Server Error: {response.status_code}')\nelif response.ok:\n    print('Request was successful.')\nelse:\n    print(f'Other Status Code: {response.status_code}')"}
{"prompt": "Example of conditional logic based on `response.status_code`.", "completion": "import requests\n\nurls_to_check = ['https://httpbin.org/get', 'https://httpbin.org/status/404', 'https://httpbin.org/delay/5']\n\nfor url in urls_to_check:\n    try:\n        response = requests.get(url, timeout=3)\n        if response.ok:\n            print(f'{url} - OK ({response.status_code})')\n        else:\n            print(f'{url} - FAILED ({response.status_code})')\n    except requests.exceptions.Timeout:\n        print(f'{url} - TIMEOUT')\n    except requests.exceptions.RequestException as e:\n        print(f'{url} - ERROR ({e})')"}
{"prompt": "Send a HEAD request to get only headers.", "completion": "import requests\n\nresponse = requests.head('https://httpbin.org/get')\nprint(f'Status Code from HEAD: {response.status_code}')\nprint('Headers:')\nfor header, value in response.headers.items():\n    print(f'  {header}: {value}')\n# response.content and response.text will be empty for HEAD"}
{"prompt": "Use `requests.head` to check Content-Length without downloading body.", "completion": "import requests\n\nresponse = requests.head('https://httpbin.org/bytes/50000') # Check size of 50KB resource\ncontent_length = response.headers.get('Content-Length')\nif content_length:\n    print(f'Resource size is approximately: {content_length} bytes')\nelse:\n    print('Content-Length header not found.')"}
{"prompt": "Example of a HEAD request using the requests library.", "completion": "import requests\n\nresp = requests.head('https://www.wikipedia.org')\nprint(f'Status: {resp.status_code}')\nprint(f'Content-Type: {resp.headers.get(\"Content-Type\")}')"}
{"prompt": "How to send an OPTIONS request with requests?", "completion": "import requests\n\nresponse = requests.options('https://httpbin.org/get')\nprint(f'OPTIONS Status Code: {response.status_code}')\nallowed_methods = response.headers.get('Allow')\nif allowed_methods:\n    print(f'Allowed HTTP methods: {allowed_methods}')\nelse:\n    print('Allow header not present in response.')"}
{"prompt": "Use `requests.options` to find allowed methods for a URL.", "completion": "import requests\n\nresponse = requests.options('https://httpbin.org/post')\nprint(f'Status: {response.status_code}')\nprint(f'Allow header: {response.headers.get(\"Allow\")}')"}
{"prompt": "Example of an OPTIONS request in Python requests.", "completion": "import requests\n\nresp = requests.options('https://api.github.com') # Example with a real API\nprint(f'Status: {resp.status_code}')\nprint('Allowed methods on GitHub API root:')\nprint(resp.headers.get('Allow'))"}
{"prompt": "Stream a large download using requests.", "completion": "import requests\n\nurl = 'https://httpbin.org/stream-bytes/102400' # Stream 100KB\n\ntry:\n    with requests.get(url, stream=True) as response:\n        response.raise_for_status() # Check for errors before proceeding\n        downloaded_bytes = 0\n        print('Starting stream download...')\n        # Iterate over chunks (e.g., 8KB)\n        for chunk in response.iter_content(chunk_size=8192):\n            # Process chunk (e.g., write to file, update progress)\n            # if chunk: # filter out keep-alive new chunks\n            downloaded_bytes += len(chunk)\n            print(f'  Received chunk, total downloaded: {downloaded_bytes} bytes')\n            # Example: write chunk to file\n            # with open('downloaded_file', 'ab') as f:\n            #     f.write(chunk)\n        print('Download finished.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error during streaming download: {e}')"}
{"prompt": "Use `stream=True` and `iter_content` for downloading large files.", "completion": "import requests\n\nurl = 'https://httpbin.org/bytes/50000' # 50KB example\nchunk_count = 0\nwith requests.get(url, stream=True) as r:\n    r.raise_for_status()\n    print('Streaming response...')\n    for chunk in r.iter_content(chunk_size=1024):\n        chunk_count += 1\n        # Process chunk here...\n    print(f'Finished streaming. Received {chunk_count} chunks.')"}
{"prompt": "Example of streaming response content with requests.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/stream/5', stream=True) # Stream 5 lines\nprint('Streaming lines:')\nfor line in response.iter_lines():\n    if line:\n        decoded_line = line.decode('utf-8')\n        print(f'  {decoded_line}')"}
{"prompt": "How to access cookies set by the server in the response?", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/cookies/set?mycookie=cookievalue&session=abc')\ncookies_received = response.cookies\nprint('Cookies received from server:')\nfor name, value in cookies_received.items():\n    print(f'  {name}: {value}')"}
{"prompt": "Read the response cookies using `response.cookies`.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/cookies/set/user_id/12345')\nresponse_cookies = response.cookies\nuser_id_cookie = response_cookies.get('user_id')\nprint(f'Value of user_id cookie: {user_id_cookie}')"}
{"prompt": "Example of getting cookies from a requests response object.", "completion": "import requests\n\nurl = 'https://google.com'\nresponse = requests.get(url)\nprint(f'Cookies set by {url}:')\nif response.cookies:\n    for cookie in response.cookies:\n        print(f'  Name: {cookie.name}, Value: {cookie.value}, Domain: {cookie.domain}')\nelse:\n    print('  No cookies were set in the response.')"}
{"prompt": "Set session-level headers in requests.", "completion": "import requests\n\ns = requests.Session()\ns.headers.update({'X-API-Version': '2.0'})\n\nresponse1 = s.get('https://httpbin.org/headers')\nprint('Request 1 headers:', response1.json()['headers'])\nresponse2 = s.get('https://httpbin.org/headers')\nprint('Request 2 headers:', response2.json()['headers'])"}
{"prompt": "Persist headers across multiple requests using a Session.", "completion": "import requests\n\nwith requests.Session() as session:\n    session.headers['Authorization'] = 'Bearer mytoken123'\n    resp_a = session.get('https://httpbin.org/headers')\n    print(f'Auth header sent: {\"Authorization\" in resp_a.json()[\"headers\"]}')\n    resp_b = session.post('https://httpbin.org/post')\n    print(f'Auth header sent on POST: {\"Authorization\" in resp_b.json()[\"headers\"]}')"}
{"prompt": "How to use a Session object to manage default headers?", "completion": "import requests\n\nsession = requests.Session()\nsession.headers = {'Accept-Language': 'en-US,en;q=0.9'}\n\nresponse = session.get('https://httpbin.org/headers')\nprint(response.json()['headers'].get('Accept-Language'))"}
{"prompt": "Pass request data as a string instead of dict for POST.", "completion": "import requests\nimport json\n\ndata_string = json.dumps({'custom_key': 'custom_value'})\nheaders = {'Content-Type': 'application/json'}\n\nresponse = requests.post('https://httpbin.org/post', data=data_string, headers=headers)\nprint(f'Status: {response.status_code}')\nprint(f'Raw data received by server: {response.json().get(\"data\")}')"}
{"prompt": "Send raw byte data in a POST request body.", "completion": "import requests\n\nraw_bytes = b'\\x01\\x02\\x03\\x04\\x05'\nheaders = {'Content-Type': 'application/octet-stream'}\n\nresponse = requests.post('https://httpbin.org/post', data=raw_bytes, headers=headers)\nprint(f'Status: {response.status_code}')\n# Check if server received data correctly (httpbin might represent it as base64 or similar)\nprint(response.json())"}
{"prompt": "Example of POSTing a raw string body.", "completion": "import requests\n\nbody = '<request><id>123</id></request>'\nheaders = {'Content-Type': 'application/xml'}\n\nresponse = requests.post('https://httpbin.org/post', data=body, headers=headers)\nprint(f'Status: {response.status_code}')\nprint(f'Data received: {response.json().get(\"data\")}')"}
{"prompt": "Make a GET request and expect XML content.", "completion": "import requests\n\nresponse = requests.get('https://httpbin.org/xml')\nif 'application/xml' in response.headers.get('Content-Type', ''):\n    print('Received XML content:')\n    print(response.text)\nelse:\n    print(f'Expected XML, but got: {response.headers.get(\"Content-Type\")}')"}
{"prompt": "Handle a Gzip encoded response automatically.", "completion": "import requests\n\n# Requests handles gzip decompression automatically by default\nresponse = requests.get('https://httpbin.org/gzip')\nprint('Response content (should be decompressed JSON):')\ntry:\n    print(response.json())\nexcept Exception as e:\n    print(f'Could not parse JSON: {e}')"}
{"prompt": "How does requests handle gzip compression?", "completion": "import requests\n\n# Requests automatically decompresses gzip/deflate based on Content-Encoding header\nresponse = requests.get('https://httpbin.org/deflate')\nprint(f'Status Code: {response.status_code}')\n# The response.text or response.json() will be the decompressed content\nprint('Decompressed content:')\nprint(response.json())"}
{"prompt": "How to use a requests Session with basic authentication?", "completion": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nwith requests.Session() as session:\n    session.auth = HTTPBasicAuth('myuser', 'mypass')\n    response = session.get('https://httpbin.org/basic-auth/myuser/mypass')\n    print(f'Session Auth Status: {response.status_code}')\n    print(f'Authenticated: {response.json().get(\"authenticated\")}')"}
{"prompt": "Set default parameters for all requests in a Session.", "completion": "import requests\n\nwith requests.Session() as session:\n    session.params.update({'api_key': 'DEFAULT_KEY', 'format': 'json'})\n    response1 = session.get('https://httpbin.org/get')\n    print('Request 1 args:', response1.json()['args'])\n    response2 = session.get('https://httpbin.org/get', params={'extra': 'value'}) # Params merge\n    print('Request 2 args:', response2.json()['args'])"}
{"prompt": "Persist parameters across session requests using Python requests.", "completion": "import requests\n\ns = requests.Session()\ns.params = {'user_id': 'abc-789'}\n\nresp1 = s.get('https://httpbin.org/get')\nprint(resp1.json()['args'])\nresp2 = s.get('https://httpbin.org/get') # user_id param is still sent\nprint(resp2.json()['args'])"}
{"prompt": "How to handle a ConnectionError specifically in requests?", "completion": "import requests\n\nurl = 'http://localhost:9999' # Assume nothing is running here\ntry:\n    response = requests.get(url, timeout=2)\n    print('Connection successful?') # Should not print\nexcept requests.exceptions.ConnectionError as e:\n    print(f'Failed to connect to {url}: {e}')\nexcept requests.exceptions.RequestException as e:\n    print(f'Some other request error: {e}')"}
{"prompt": "Catch HTTP errors (4xx, 5xx) separately from other request errors.", "completion": "import requests\n\nurl = 'https://httpbin.org/status/404'\ntry:\n    response = requests.get(url)\n    response.raise_for_status() # Raise HTTPError for bad responses\n    print('Request was successful.')\nexcept requests.exceptions.HTTPError as err_http:\n    print(f'HTTP Error: {err_http.response.status_code} - {err_http}')\nexcept requests.exceptions.RequestException as err_req:\n    print(f'Other Request Error: {err_req}')"}
