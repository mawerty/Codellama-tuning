{"index": 0, "prompt": "Example of specific exception handling with requests (Timeout, HTTPError).", "reference": "import requests\n\nurls = ['https://httpbin.org/delay/5', 'https://httpbin.org/status/403', 'https://httpbin.org/get']\nfor url in urls:\n    try:\n        response = requests.get(url, timeout=2)\n        response.raise_for_status()\n        print(f'{url}: Success ({response.status_code})')\n    except requests.exceptions.Timeout:\n        print(f'{url}: Timed Out')\n    except requests.exceptions.HTTPError as e:\n        print(f'{url}: HTTP Error ({e.response.status_code})')\n    except requests.exceptions.RequestException as e:\n        print(f'{url}: Other Error ({e})')", "output": "import requests\n\n\ndef get_url(url):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        print(f\"Status code: {response.status_code}\")\n    except requests.Timeout:\n        print(f\"Timeout occurred while trying to get {url}\")\n    except requests.HTTPError:\n        print(f\"HTTPError occurred while trying to get {url}\")\n\n\nget_url(\"http://httpbin.org/delay/6\")\nget_url(\"http://httpbin.org/status/404\")"}
{"index": 1, "prompt": "Iterate over streamed response lines with requests.", "reference": "import requests\n\nurl = 'https://httpbin.org/stream/3' # Stream 3 JSON lines\nlines_received = []\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        for line in r.iter_lines():\n            if line:\n                lines_received.append(line.decode('utf-8'))\n    print('Received lines:')\n    print(lines_received)\nexcept requests.exceptions.RequestException as e:\n    print(f'Error streaming lines: {e}')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/stream/line', stream=True)\n\nfor line in response.iter_lines():\n    print(line.decode('utf8'))"}
{"index": 2, "prompt": "Process streamed bytes in chunks using `iter_content`.", "reference": "import requests\n\nurl = 'https://httpbin.org/bytes/2048' # Get 2KB of random bytes\nbyte_chunks = []\ntotal_bytes = 0\nwith requests.get(url, stream=True) as r:\n    r.raise_for_status()\n    for chunk in r.iter_content(chunk_size=512):\n        byte_chunks.append(chunk)\n        total_bytes += len(chunk)\nprint(f'Received {len(byte_chunks)} chunks, total {total_bytes} bytes.')", "output": "import requests\n\nurl = \"https://httpbin.org/stream/1\"\n\nresponse = requests.get(url, stream=True)\n\nfor chunk in response.iter_content(chunk_size=1024):\n    print(chunk)"}
{"index": 3, "prompt": "Download a file chunk by chunk and save it.", "reference": "import requests\n\nurl = 'https://httpbin.org/image/jpeg' # Example file URL\nfilename = 'downloaded_image.jpeg'\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    print(f'File {filename} downloaded successfully.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error downloading file: {e}')\n# Optional: Add import os; os.remove(filename) for cleanup", "output": "import urllib.request\n\ndef download_file(url, file_name):\n    with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\ndownload_file('http://www.example.com/file.zip', 'file.zip')"}
{"index": 4, "prompt": "Example of `requests.patch` method.", "reference": "import requests\n\nurl = 'https://httpbin.org/patch'\ndata = {'field_to_update': 'new_value'}\nresponse = requests.patch(url, data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form data received by PATCH: {response.json().get(\"form\")}')", "output": "import requests\n\nurl = 'https://httpbin.org/patch'\n\ndata = {\n    'name': 'John Doe',\n    'age': 25,\n    'address': '123 Fake St'\n}\n\nheaders = {\n    'content-type': 'application/json',\n    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'\n}"}
{"index": 5, "prompt": "Use `response.links` to find the 'next' page URL.", "reference": "import requests\n\n# Example with GitHub API (replace with actual URL if testing)\n# url = 'https://api.github.com/users/octocat/repos?per_page=5'\n# response = requests.get(url)\n\n# Simulate a response with links\nclass SimulatedResponse:\n    headers = {'Link': '<https://api.github.com/user/repos?page=2>; rel=\"next\"'}\n    links = {}\n\nresponse = SimulatedResponse()\nresponse.links = requests.utils.parse_header_links(response.headers.get('Link', ''))\n\nif 'next' in response.links:\n    next_url = response.links['next']['url']\n    print(f'The URL for the next page is: {next_url}')\nelse:\n    print('No next page link found.')", "output": "import requests\n\nurl = 'https://api.github.com/users/octokit/repos'\nresponse = requests.get(url)\n\nif 'next' in response.links:\n    next_page = response.links['next']['url']\n    print(next_page)"}
{"index": 6, "prompt": "Verify if response body contains 'httpbin'.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/robots.txt')\nif 'httpbin' in response.text.lower():\n    print('The word \"httpbin\" was found in the response.')\nelse:\n    print('The word \"httpbin\" was not found.')", "output": "from httprunner import HttpRunner, Config, Step, RunRequest\n\nclass TestCaseDemo(HttpRunner):\n\n    config = Config(\"testcase description\")\n\n    teststeps = [\n        Step(\n            RunRequest(\n                \"verify response body contains 'httpbin'\",\n                **{\n                    \"url\": \"https://httpbin.org/anything\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"user_agent\": \"iOS/10.3\",\n                        \"device_sn\": \"HZfFBh6tU59"}
{"index": 7, "prompt": "Make a GET request combining params, headers, and a timeout.", "reference": "import requests\n\nparams = {'query': 'example', 'limit': 10}\nheaders = {'Accept': 'application/vnd.api+json'}\ntimeout = 5.0 # seconds\n\ntry:\n    response = requests.get('https://httpbin.org/get', params=params, headers=headers, timeout=timeout)\n    response.raise_for_status()\n    print('Request successful.')\n    print('Args received:', response.json()['args'])\n    print('Headers received:', response.json()['headers'])\nexcept requests.exceptions.Timeout:\n    print('Request timed out.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Request failed: {e}')", "output": "import requests\n\nurl = \"https://httpbin.org/anything\"\n\nparams = {\n  \"foo\": [\n    \"bar\",\n    \"baz\"\n  ]\n}\nheaders = {\n  \"accept\": \"application/json\",\n  \"x-foo\": \"Bar\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=params, timeout=5)\n\nprint(response.json())"}
{"index": 8, "prompt": "Send a POST request with JSON data, custom headers, and auth.", "reference": "import requests\nfrom requests.auth import HTTPBasicAuth\n\njson_payload = {'data': 'payload'}\nheaders = {'X-Request-ID': '123-abc'}\nauth = HTTPBasicAuth('testuser', 'testpass')\n\nresponse = requests.post('https://httpbin.org/post', json=json_payload, headers=headers, auth=auth)\n\nprint(f'Status: {response.status_code}')\nprint('Received JSON:', response.json()['json'])\nprint('Received Headers:', response.json()['headers'])\nprint('Received Auth:', response.json().get('args')) # Basic auth info might appear here or need specific endpoint", "output": "import requests\n\nurl = \"https://httpbin.org/post\"\n\npayload = \"{\\n    \\\"key1\\\": \\\"value1\\\",\\n    \\\"key2\\\": \\\"value2\\\"\\n}\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE"}
{"index": 9, "prompt": "Example of a complex request using multiple requests options.", "reference": "import requests\n\nresponse = requests.request(\n    method='PUT', \n    url='https://httpbin.org/put', \n    params={'update_id': '5'}, \n    json={'status': 'complete'}, \n    headers={'X-Client': 'MyScript'}, \n    timeout=10\n)\n\nprint(f'Status: {response.status_code}')\nprint(response.json())", "output": "from google.cloud import datastore\n\nclient = datastore.Client()\n\nkey = client.key('Person', '123')\n\nquery = client.query(kind='Person')\nquery.add_filter('name', '=', 'John')\nquery.add_filter('age', '=', 20)\nquery.order = ['age']\n\nentities = list(query.fetch(limit=10))"}
{"index": 10, "prompt": "POST data as plain text with requests.", "reference": "import requests\n\ndata = 'This is raw text data.'\nheaders = {'Content-Type': 'text/plain'}\n\nresponse = requests.post('https://httpbin.org/post', data=data, headers=headers)\nprint(f'Status: {response.status_code}')\nprint(f'Data received by server: {response.json().get(\"data\")}')", "output": "import requests\n\nurl = \"https://www.example.com\"\n\npayload = \"POST data as plain text\"\nheaders = {\n  'Content-Type': 'text/plain'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"}
{"index": 11, "prompt": "Send XML data in a POST request.", "reference": "import requests\n\nxml_data = '<message><content>Hello</content></message>'\nheaders = {'Content-Type': 'application/xml'}\n\nresponse = requests.post('https://httpbin.org/post', data=xml_data, headers=headers)\nprint(f'Status: {response.status_code}')\n# httpbin will show the raw string in the 'data' field\nprint(f'Data received: {response.json().get(\"data\")}')", "output": "import requests\nimport xmltodict\n\n\ndef main():\n    url = \"http://127.0.0.1:28139/post\"\n    xml_data = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <root>\n        <a>1</a>\n        <b>2</b>\n        <c>3</c>\n    </root>\n    \"\"\"\n    response = requests.post(url, data=xml_data)\n    print(response.text)\n    print(xmltodict.parse(response.text))\n\n\nif __name__ == \"__main__\":"}
{"index": 12, "prompt": "How to send a list of values for a single form key in POST?", "reference": "import requests\n\n# Send multiple values for the key 'items'\npayload = {'items': ['apple', 'banana', 'cherry']}\n\nresponse = requests.post('https://httpbin.org/post', data=payload)\nprint(f'Status: {response.status_code}')\n# Check the 'form' field in the response JSON\nprint(f'Form data received: {response.json().get(\"form\")}')", "output": "from flask import Flask\nfrom flask_wtf.csrf import CSRFProtect\nfrom wtforms import Form, TextField\nfrom wtforms.validators import DataRequired\n\napp = Flask(__name__)\ncsrf = CSRFProtect(app)\n\nclass MultiValueForm(Form):\n    multi_value = TextField('multi_value', validators=[DataRequired()])\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    form = MultiValueForm()\n    if form.validate_on_submit():\n        for value in form.multi_value.data:\n            print("}
{"index": 13, "prompt": "Pass tuples as data values in requests post.", "reference": "import requests\n\n# Useful for multipart/form-data if needed, but works for simple POST too\ndata = {'file_info': ('report.txt', 'content'), 'metadata': ('key', 'value')}\nresponse = requests.post('https://httpbin.org/post', data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form received: {response.json().get(\"form\")}')", "output": "import requests\n\nurl = \"http://127.0.0.1:8080/api/v1/calculate\"\n\npayload = {\n    'data': [\n        (1, 2),\n        (2, 3),\n        (3, 4)\n    ]\n}\nheaders = {\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"}
{"index": 14, "prompt": "Check if a response was a redirect.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1')\nif response.history: # History list is non-empty if redirects occurred\n    print('Request was redirected.')\n    print(f'Final URL: {response.url}')\n    print(f'Original status code: {response.history[0].status_code}')\nelse:\n    print('Request was not redirected.')", "output": "if response.status_code in [301, 302]:\n    print('Redirect')"}
{"index": 15, "prompt": "Verify if the final response URL is different from the initial request URL.", "reference": "import requests\n\ninitial_url = 'https://httpbin.org/absolute-redirect/2'\nresponse = requests.get(initial_url)\n\nif response.url != initial_url:\n    print(f'Redirect occurred. Initial URL: {initial_url}, Final URL: {response.url}')\nelse:\n    print('No redirect occurred.')", "output": "def check_url_redirection(self, initial_url, final_url):\n    if initial_url != final_url:\n        return True\n    return False"}
{"index": 16, "prompt": "Use `response.is_redirect` property.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect-to?url=https://example.com', allow_redirects=False)\n# Need allow_redirects=False to check the intermediate response\nif response.is_redirect:\n    print(f'Response is a redirect (Status: {response.status_code})')\n    print(f'Location header points to: {response.headers.get(\"Location\")}')\nelse:\n    print('Response is not a redirect.')", "output": "from requests import Response\n\n\ndef is_redirect(response: Response) -> bool:\n    return response.is_redirect"}
{"index": 17, "prompt": "Check if a redirect is permanent (301, 308).", "reference": "import requests\n\n# Need allow_redirects=False to check the intermediate response\nresponse = requests.get('https://httpbin.org/status/301', allow_redirects=False) \nif response.is_permanent_redirect:\n    print(f'Response is a permanent redirect (Status: {response.status_code})')\nelse:\n    print(f'Response is not a permanent redirect (Status: {response.status_code})')", "output": "import requests\nfrom urllib3.util import parse_url\n\n\ndef is_permanent_redirect(url):\n    parsed_url = parse_url(url)\n    if parsed_url.scheme == 'http':\n        r = requests.get(url, allow_redirects=False)\n        if r.status_code == 301 or r.status_code == 308:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_permanent_redirect('https://www.google.com'))\n    print"}
{"index": 18, "prompt": "How to prepare a request without sending it using requests?", "reference": "import requests\n\nrequest = requests.Request('GET', 'https://httpbin.org/get', params={'key': 'val'}, headers={'X-Custom': 'Prep'}) \nprepared = request.prepare()\n\nprint('Prepared Request Details:')\nprint(f'Method: {prepared.method}')\nprint(f'URL: {prepared.url}')\nprint(f'Headers: {prepared.headers}')\nprint(f'Body: {prepared.body}')", "output": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nurl = \"http://example.com/\"\n\npayload = \"{\\n    \\\"key\\\": \\\"value\\\"\\n}\"\nheaders = {\n    'Content-Type': \"application/json\",\n    'Accept': \"application/json\",\n    'Authorization': \"Basic Zm9vOmJhcg==\"\n    }\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)"}
{"index": 19, "prompt": "Use a Session to prepare a request object.", "reference": "import requests\n\nsession = requests.Session()\nsession.headers.update({'User-Agent': 'MySessionAgent'}) # Session headers\n\nreq = requests.Request('POST', 'https://httpbin.org/post', json={'data': 1})\nprepared_req = session.prepare_request(req)\n\nprint('Prepared Request (via Session):')\nprint(f'URL: {prepared_req.url}')\nprint(f'Headers: {prepared_req.headers}') # Will include session headers\nprint(f'Body: {prepared_req.body}')", "output": "session = Session(api_key)\nrequest = session.create_request(\n    'get',\n    '/users',\n    {\n        'user_ids': [1, 2, 3]\n    }\n)"}
{"index": 20, "prompt": "Manually create and send a PreparedRequest with a Session.", "reference": "import requests\n\ns = requests.Session()\nreq = requests.Request('GET', 'https://httpbin.org/get', headers={'X-Manual': 'Send'}) \nprepped = s.prepare_request(req)\n\n# Now send the prepared request\nresponse = s.send(prepped, timeout=5)\n\nprint(f'Status Code: {response.status_code}')\nprint(response.json()['headers'])", "output": "import requests\n\nurl = \"http://httpbin.org/anything\"\n\npayload = \"{\\n    \\\"foo\\\": \\\"bar\\\"\\n}\"\nheaders = {\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"}
{"index": 21, "prompt": "Check a specific header value in the response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/response-headers?Server=MyCustomServer/1.0')\nserver_header = response.headers.get('Server')\nprint(f'Server header value: {server_header}')\nif server_header == 'MyCustomServer/1.0':\n    print('Server header matches expected value.')", "output": "from netattacker.attacker import Attacker\n\n# Create an attacker\nattacker = Attacker()\n\n# Set the target\nattacker.set_target(\"https://www.example.com\")\n\n# Check the value of the header\nattacker.check_header_value(\"x-frame-options\", \"SAMEORIGIN\")"}
{"index": 22, "prompt": "Verify the Content-Type of a response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/image/png')\nexpected_content_type = 'image/png'\nactual_content_type = response.headers.get('Content-Type', '').lower()\n\nif actual_content_type == expected_content_type:\n    print(f'Content-Type is correct: {actual_content_type}')\nelse:\n    print(f'Unexpected Content-Type. Expected: {expected_content_type}, Got: {actual_content_type}')", "output": "from urllib.request import urlopen\nimport requests\n\n\ndef get_page_content(url):\n    response = urlopen(url)\n    return response.read()\n\n\ndef get_page_content2(url):\n    response = requests.get(url)\n    return response.text\n\n\ndef test_get_page_content():\n    url = 'http://httpbin.org/xml'\n    assert get_page_content(url).startswith(b'<?xml')\n\n\ndef test_get_page_content2():\n    url = 'http://httpbin.org/xml'\n    assert get_page_content"}
{"index": 23, "prompt": "How to get the raw socket response (advanced)?", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/get', stream=True)\n\ntry:\n    # Access the underlying urllib3 response\n    raw_response = response.raw\n    # You can read directly from raw_response, but requests handles encoding/decompression better\n    print(f'Underlying raw response object: {type(raw_response)}')\n    # Example: Read a small amount of raw data\n    # raw_data = raw_response.read(100)\n    # print(f'Raw data sample (first 100 bytes): {raw_data}')\nfinally:\n    # Important to release the connection if using raw\n    if 'raw_response' in locals():\n        raw_response.release_conn()", "output": "import requests\n\nurl = 'http://127.0.0.1:8000/get'\n\nresponse = requests.get(url)\n\nprint(response.content)"}
{"index": 24, "prompt": "Force requests to use a specific encoding for response text.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/100') # Get raw bytes\nprint(f'Original detected encoding: {response.encoding}')\n\n# Force encoding (example assumes the bytes are actually valid UTF-8)\nresponse.encoding = 'utf-8'\n\ntry:\n    text_content = response.text\n    print(f'Text content after forcing encoding to {response.encoding}:')\n    # print(text_content) # This might fail if bytes aren't valid UTF-8\n    print('[Text content processed]')\nexcept UnicodeDecodeError as e:\n    print(f'Forcing encoding failed: {e}')", "output": "from bs4 import BeautifulSoup\nimport requests\n\nurl = 'https://httpbin.org/html'\n\nr = requests.get(url)\n\nsoup = BeautifulSoup(r.content, 'lxml')\n\nprint(soup.get_text())"}
