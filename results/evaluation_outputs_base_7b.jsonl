{"index": 0, "prompt": "Example of specific exception handling with requests (Timeout, HTTPError).", "reference": "import requests\n\nurls = ['https://httpbin.org/delay/5', 'https://httpbin.org/status/403', 'https://httpbin.org/get']\nfor url in urls:\n    try:\n        response = requests.get(url, timeout=2)\n        response.raise_for_status()\n        print(f'{url}: Success ({response.status_code})')\n    except requests.exceptions.Timeout:\n        print(f'{url}: Timed Out')\n    except requests.exceptions.HTTPError as e:\n        print(f'{url}: HTTP Error ({e.response.status_code})')\n    except requests.exceptions.RequestException as e:\n        print(f'{url}: Other Error ({e})')", "output": "from requests import get, RequestException\n\ntry:\n    response = get(\"http://httpbin.org/delay/3\", timeout=1)\nexcept RequestException as e:\n    print(f\"Error: {e}\")"}
{"index": 1, "prompt": "Iterate over streamed response lines with requests.", "reference": "import requests\n\nurl = 'https://httpbin.org/stream/3' # Stream 3 JSON lines\nlines_received = []\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        for line in r.iter_lines():\n            if line:\n                lines_received.append(line.decode('utf-8'))\n    print('Received lines:')\n    print(lines_received)\nexcept requests.exceptions.RequestException as e:\n    print(f'Error streaming lines: {e}')", "output": "import requests\n\ndef stream_download(url):\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        for chunk in r.iter_content(chunk_size=8192):\n            if chunk:\n                print(chunk)\n\nstream_download('http://www.example.com/')"}
{"index": 2, "prompt": "Process streamed bytes in chunks using `iter_content`.", "reference": "import requests\n\nurl = 'https://httpbin.org/bytes/2048' # Get 2KB of random bytes\nbyte_chunks = []\ntotal_bytes = 0\nwith requests.get(url, stream=True) as r:\n    r.raise_for_status()\n    for chunk in r.iter_content(chunk_size=512):\n        byte_chunks.append(chunk)\n        total_bytes += len(chunk)\nprint(f'Received {len(byte_chunks)} chunks, total {total_bytes} bytes.')", "output": "#!/usr/bin/env python3\n\nimport sys\nimport requests\n\nURL = \"http://localhost:8080/test/foo\"\n\nr = requests.get(URL, stream=True)\n\nfor chunk in r.iter_content(1024):\n    sys.stdout.buffer.write(chunk)"}
{"index": 3, "prompt": "Download a file chunk by chunk and save it.", "reference": "import requests\n\nurl = 'https://httpbin.org/image/jpeg' # Example file URL\nfilename = 'downloaded_image.jpeg'\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    print(f'File {filename} downloaded successfully.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error downloading file: {e}')\n# Optional: Add import os; os.remove(filename) for cleanup", "output": "def download_file(url, file_name):\n    r = requests.get(url, stream=True)\n    with open(file_name, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)"}
{"index": 4, "prompt": "Example of `requests.patch` method.", "reference": "import requests\n\nurl = 'https://httpbin.org/patch'\ndata = {'field_to_update': 'new_value'}\nresponse = requests.patch(url, data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form data received by PATCH: {response.json().get(\"form\")}')", "output": "import requests\n\npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.patch('http://httpbin.org/patch', data=payload)\nprint(r.text)"}
{"index": 5, "prompt": "Use `response.links` to find the 'next' page URL.", "reference": "import requests\n\n# Example with GitHub API (replace with actual URL if testing)\n# url = 'https://api.github.com/users/octocat/repos?per_page=5'\n# response = requests.get(url)\n\n# Simulate a response with links\nclass SimulatedResponse:\n    headers = {'Link': '<https://api.github.com/user/repos?page=2>; rel=\"next\"'}\n    links = {}\n\nresponse = SimulatedResponse()\nresponse.links = requests.utils.parse_header_links(response.headers.get('Link', ''))\n\nif 'next' in response.links:\n    next_url = response.links['next']['url']\n    print(f'The URL for the next page is: {next_url}')\nelse:\n    print('No next page link found.')", "output": "import requests\n\nurl = 'https://api.github.com/search/repositories?q=language:python&sort=stars'\nr = requests.get(url)\nprint(f\"Status code: {r.status_code}\")\n\nresponse_dict = r.json()\nprint(f\"Total repositories: {response_dict['total_count']}\")\n\nrepo_dicts = response_dict['items']\nprint(f\"Repositories returned: {len(repo_dicts)}\")\n\nrepo_dict = repo_dicts[0]\nprint(f\"\\nKeys: {len(repo_dict)}\")\n\nfor key in sorted"}
{"index": 6, "prompt": "Verify if response body contains 'httpbin'.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/robots.txt')\nif 'httpbin' in response.text.lower():\n    print('The word \"httpbin\" was found in the response.')\nelse:\n    print('The word \"httpbin\" was not found.')", "output": "def verify_response_body(response):\n    assert 'httpbin' in response.body"}
{"index": 7, "prompt": "Make a GET request combining params, headers, and a timeout.", "reference": "import requests\n\nparams = {'query': 'example', 'limit': 10}\nheaders = {'Accept': 'application/vnd.api+json'}\ntimeout = 5.0 # seconds\n\ntry:\n    response = requests.get('https://httpbin.org/get', params=params, headers=headers, timeout=timeout)\n    response.raise_for_status()\n    print('Request successful.')\n    print('Args received:', response.json()['args'])\n    print('Headers received:', response.json()['headers'])\nexcept requests.exceptions.Timeout:\n    print('Request timed out.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Request failed: {e}')", "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\n\nheaders = {'Accept': 'application/json'}\n\nparams = {'key': 'value'}\n\nresponse = requests.get(url, headers=headers, params=params, timeout=3)\n\nprint(response.status_code)\nprint(response.json())"}
{"index": 8, "prompt": "Send a POST request with JSON data, custom headers, and auth.", "reference": "import requests\nfrom requests.auth import HTTPBasicAuth\n\njson_payload = {'data': 'payload'}\nheaders = {'X-Request-ID': '123-abc'}\nauth = HTTPBasicAuth('testuser', 'testpass')\n\nresponse = requests.post('https://httpbin.org/post', json=json_payload, headers=headers, auth=auth)\n\nprint(f'Status: {response.status_code}')\nprint('Received JSON:', response.json()['json'])\nprint('Received Headers:', response.json()['headers'])\nprint('Received Auth:', response.json().get('args')) # Basic auth info might appear here or need specific endpoint", "output": "import requests\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n}\n\ndata = '{\"id\":1,\"name\":\"John\",\"last_name\":\"Doe\"}'\n\nresponse = requests.post(\n    \"https://httpbin.org/post\",\n    headers=headers,\n    data=data,\n    auth=(\"username\", \"password\"),\n)\n\nprint(response.json())"}
{"index": 9, "prompt": "Example of a complex request using multiple requests options.", "reference": "import requests\n\nresponse = requests.request(\n    method='PUT', \n    url='https://httpbin.org/put', \n    params={'update_id': '5'}, \n    json={'status': 'complete'}, \n    headers={'X-Client': 'MyScript'}, \n    timeout=10\n)\n\nprint(f'Status: {response.status_code}')\nprint(response.json())", "output": "# -*- coding: utf-8 -*-\nimport os\nimport sys\nimport time\nimport logging\nimport json\nimport requests\n\n\ndef main():\n    # Logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger()\n\n    # Get API Key from environment variable\n    api_key = os.environ.get('CYBERGRP_API_KEY')\n    if not api_key:\n        logger.error('No API Key in Enviroment Variables')\n        sys.exit(1)\n\n    # Get API URL from environment variable\n    api_url = os.environ.get('C"}
{"index": 10, "prompt": "POST data as plain text with requests.", "reference": "import requests\n\ndata = 'This is raw text data.'\nheaders = {'Content-Type': 'text/plain'}\n\nresponse = requests.post('https://httpbin.org/post', data=data, headers=headers)\nprint(f'Status: {response.status_code}')\nprint(f'Data received by server: {response.json().get(\"data\")}')", "output": "import requests\n\nurl = \"http://127.0.0.1:5000/api/v1/test\"\n\npayload = \"{\\n    \\\"title\\\": \\\"Test\\\",\\n    \\\"body\\\": \\\"Test body\\\",\\n    \\\"userId\\\": 1\\n}\"\nheaders = {\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"}
{"index": 11, "prompt": "Send XML data in a POST request.", "reference": "import requests\n\nxml_data = '<message><content>Hello</content></message>'\nheaders = {'Content-Type': 'application/xml'}\n\nresponse = requests.post('https://httpbin.org/post', data=xml_data, headers=headers)\nprint(f'Status: {response.status_code}')\n# httpbin will show the raw string in the 'data' field\nprint(f'Data received: {response.json().get(\"data\")}')", "output": "import requests\n\nurl = \"http://localhost:8000/api/v1/test_xml_post/\"\n\npayload = \"<xml><foo>bar</foo><baz/></xml>\"\nheaders = {\n  'Content-Type': 'application/xml'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))"}
{"index": 12, "prompt": "How to send a list of values for a single form key in POST?", "reference": "import requests\n\n# Send multiple values for the key 'items'\npayload = {'items': ['apple', 'banana', 'cherry']}\n\nresponse = requests.post('https://httpbin.org/post', data=payload)\nprint(f'Status: {response.status_code}')\n# Check the 'form' field in the response JSON\nprint(f'Form data received: {response.json().get(\"form\")}')", "output": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport requests\nimport urllib\n\nurl = \"http://127.0.0.1/login\"\ndata = {\n    'username': ['a', 'b', 'c'],\n}\n\nr = requests.post(url, data=data)\nprint r.text"}
{"index": 13, "prompt": "Pass tuples as data values in requests post.", "reference": "import requests\n\n# Useful for multipart/form-data if needed, but works for simple POST too\ndata = {'file_info': ('report.txt', 'content'), 'metadata': ('key', 'value')}\nresponse = requests.post('https://httpbin.org/post', data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form received: {response.json().get(\"form\")}')", "output": "import requests\n\ndata = ('name', 'pass')\nrequests.post('http://127.0.0.1:5000/api', data=data)"}
{"index": 14, "prompt": "Check if a response was a redirect.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1')\nif response.history: # History list is non-empty if redirects occurred\n    print('Request was redirected.')\n    print(f'Final URL: {response.url}')\n    print(f'Original status code: {response.history[0].status_code}')\nelse:\n    print('Request was not redirected.')", "output": "from flask import redirect\n\ndef check_redirect():\n    if response.status_code == 302:\n        return True\n    return False"}
{"index": 15, "prompt": "Verify if the final response URL is different from the initial request URL.", "reference": "import requests\n\ninitial_url = 'https://httpbin.org/absolute-redirect/2'\nresponse = requests.get(initial_url)\n\nif response.url != initial_url:\n    print(f'Redirect occurred. Initial URL: {initial_url}, Final URL: {response.url}')\nelse:\n    print('No redirect occurred.')", "output": "import requests\n\ndef get_url_response(url):\n    return requests.get(url).url\n\ndef verify_url_change(url):\n    url_response = get_url_response(url)\n    return url != url_response"}
{"index": 16, "prompt": "Use `response.is_redirect` property.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect-to?url=https://example.com', allow_redirects=False)\n# Need allow_redirects=False to check the intermediate response\nif response.is_redirect:\n    print(f'Response is a redirect (Status: {response.status_code})')\n    print(f'Location header points to: {response.headers.get(\"Location\")}')\nelse:\n    print('Response is not a redirect.')", "output": "import requests\n\nurl = 'https://httpbin.org/redirect/2'\n\nresponse = requests.get(url)\n\nprint(response.is_redirect)"}
{"index": 17, "prompt": "Check if a redirect is permanent (301, 308).", "reference": "import requests\n\n# Need allow_redirects=False to check the intermediate response\nresponse = requests.get('https://httpbin.org/status/301', allow_redirects=False) \nif response.is_permanent_redirect:\n    print(f'Response is a permanent redirect (Status: {response.status_code})')\nelse:\n    print(f'Response is not a permanent redirect (Status: {response.status_code})')", "output": "from urllib import request\nfrom urllib.error import HTTPError\nfrom urllib.error import URLError\n\ndef is_redirect_permanent(url):\n    try:\n        response = request.urlopen(url)\n        return response.getcode() in [301, 308]\n    except HTTPError as e:\n        return e.getcode() in [301, 308]\n    except URLError:\n        return False"}
{"index": 18, "prompt": "How to prepare a request without sending it using requests?", "reference": "import requests\n\nrequest = requests.Request('GET', 'https://httpbin.org/get', params={'key': 'val'}, headers={'X-Custom': 'Prep'}) \nprepared = request.prepare()\n\nprint('Prepared Request Details:')\nprint(f'Method: {prepared.method}')\nprint(f'URL: {prepared.url}')\nprint(f'Headers: {prepared.headers}')\nprint(f'Body: {prepared.body}')", "output": ">>> import requests\n>>> from requests import Request\n>>> url = 'http://httpbin.org/post'\n>>> headers = {'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0'}\n>>> data = {'name': 'Mozilla'}\n>>> req = Request('POST', url, headers=headers, data=data)\n>>> prepped = req.prepare()\n>>> prepped.body\nb'name=Mozilla'\n>>> prepped.headers\n{'"}
{"index": 19, "prompt": "Use a Session to prepare a request object.", "reference": "import requests\n\nsession = requests.Session()\nsession.headers.update({'User-Agent': 'MySessionAgent'}) # Session headers\n\nreq = requests.Request('POST', 'https://httpbin.org/post', json={'data': 1})\nprepared_req = session.prepare_request(req)\n\nprint('Prepared Request (via Session):')\nprint(f'URL: {prepared_req.url}')\nprint(f'Headers: {prepared_req.headers}') # Will include session headers\nprint(f'Body: {prepared_req.body}')", "output": "import requests\n\nurl = \"http://httpbin.org/post\"\n\npayload = \"foo=bar&foo=baz&data=hello\"\nheaders = {\n    'content-type': \"application/x-www-form-urlencoded\",\n    'cache-control': \"no-cache\"\n    }\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"}
{"index": 20, "prompt": "Manually create and send a PreparedRequest with a Session.", "reference": "import requests\n\ns = requests.Session()\nreq = requests.Request('GET', 'https://httpbin.org/get', headers={'X-Manual': 'Send'}) \nprepped = s.prepare_request(req)\n\n# Now send the prepared request\nresponse = s.send(prepped, timeout=5)\n\nprint(f'Status Code: {response.status_code}')\nprint(response.json()['headers'])", "output": "def create_and_send_prepared_request(session):\n    # Create the request to /\n    prepared_request = session.prepare_request(\n        requests.Request(\n            'GET',\n            'http://httpbin.org/get'\n        )\n    )\n\n    # Send the PreparedRequest\n    response = session.send(prepared_request)\n\n    # print the response\n    print(response.text)"}
{"index": 21, "prompt": "Check a specific header value in the response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/response-headers?Server=MyCustomServer/1.0')\nserver_header = response.headers.get('Server')\nprint(f'Server header value: {server_header}')\nif server_header == 'MyCustomServer/1.0':\n    print('Server header matches expected value.')", "output": "#\n# Check a specific header value in the response.\n#\n\nimport os\nimport sys\nimport requests\n\ndef send_request(url):\n    return requests.get(url)\n\ndef check_response(response):\n    # Check a specific header value in the response.\n    if 'X-Powered-By' in response.headers:\n        print('The X-Powered-By header is present.')\n\nif __name__ == '__main__':\n    url = 'https://postman-echo.com/headers'\n    resp = send_request(url)\n    check_response(resp)"}
{"index": 22, "prompt": "Verify the Content-Type of a response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/image/png')\nexpected_content_type = 'image/png'\nactual_content_type = response.headers.get('Content-Type', '').lower()\n\nif actual_content_type == expected_content_type:\n    print(f'Content-Type is correct: {actual_content_type}')\nelse:\n    print(f'Unexpected Content-Type. Expected: {expected_content_type}, Got: {actual_content_type}')", "output": "class VerifyResponseContentType(BaseStep):\n\n    def __init__(self, content_type: str, **kwargs):\n        super().__init__(**kwargs)\n        self.content_type = content_type\n\n    def execute(self, response: requests.Response) -> requests.Response:\n        if response.headers['Content-Type'] != self.content_type:\n            raise Exception('Content-Type should be: {}.'.format(self.content_type))\n        return response"}
{"index": 23, "prompt": "How to get the raw socket response (advanced)?", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/get', stream=True)\n\ntry:\n    # Access the underlying urllib3 response\n    raw_response = response.raw\n    # You can read directly from raw_response, but requests handles encoding/decompression better\n    print(f'Underlying raw response object: {type(raw_response)}')\n    # Example: Read a small amount of raw data\n    # raw_data = raw_response.read(100)\n    # print(f'Raw data sample (first 100 bytes): {raw_data}')\nfinally:\n    # Important to release the connection if using raw\n    if 'raw_response' in locals():\n        raw_response.release_conn()", "output": "import socket\n\n\ndef get_raw_socket_response(sock, data):\n    sock.send(data)\n    response = b''\n    while True:\n        try:\n            part = sock.recv(4096)\n        except socket.timeout:\n            break\n        if not part:\n            break\n        response += part\n    return response\n\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.settimeout(5)\nsock.connect(('127.0.0.1', 80))\ndata = b'GET / HTTP/1.1"}
{"index": 24, "prompt": "Force requests to use a specific encoding for response text.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/100') # Get raw bytes\nprint(f'Original detected encoding: {response.encoding}')\n\n# Force encoding (example assumes the bytes are actually valid UTF-8)\nresponse.encoding = 'utf-8'\n\ntry:\n    text_content = response.text\n    print(f'Text content after forcing encoding to {response.encoding}:')\n    # print(text_content) # This might fail if bytes aren't valid UTF-8\n    print('[Text content processed]')\nexcept UnicodeDecodeError as e:\n    print(f'Forcing encoding failed: {e}')", "output": "headers = {\n    'Accept-Encoding': 'gzip, deflate',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'\n}\n\nrequests.get(url, headers=headers, verify=False)"}
