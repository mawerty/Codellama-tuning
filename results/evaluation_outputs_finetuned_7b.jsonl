{"index": 0, "prompt": "Example of specific exception handling with requests (Timeout, HTTPError).", "reference": "import requests\n\nurls = ['https://httpbin.org/delay/5', 'https://httpbin.org/status/403', 'https://httpbin.org/get']\nfor url in urls:\n    try:\n        response = requests.get(url, timeout=2)\n        response.raise_for_status()\n        print(f'{url}: Success ({response.status_code})')\n    except requests.exceptions.Timeout:\n        print(f'{url}: Timed Out')\n    except requests.exceptions.HTTPError as e:\n        print(f'{url}: HTTP Error ({e.response.status_code})')\n    except requests.exceptions.RequestException as e:\n        print(f'{url}: Other Error ({e})')", "output": "import requests\n\ntry:\n    response = requests.get('https://httpbin.org/delay/5', timeout=3) # Delayed response\n    print(f'Status Code: {response.status_code}')\nexcept requests.exceptions.Timeout:\n    print('Request timed out.')\nexcept requests.exceptions.HTTPError as e:\n    print(f'HTTP Error: {e}')\nexcept requests.exceptions.RequestException as e:\n    print(f'Request Exception: {e}')\nelse:\n    print('Request completed successfully.')\n\n# Other examples:\ntry:\n    response = requests.get('https"}
{"index": 1, "prompt": "Iterate over streamed response lines with requests.", "reference": "import requests\n\nurl = 'https://httpbin.org/stream/3' # Stream 3 JSON lines\nlines_received = []\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        for line in r.iter_lines():\n            if line:\n                lines_received.append(line.decode('utf-8'))\n    print('Received lines:')\n    print(lines_received)\nexcept requests.exceptions.RequestException as e:\n    print(f'Error streaming lines: {e}')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/stream/10', stream=True)\n\nfor line in response.iter_lines():\n    print(line.decode('utf-8'))\n\n# If you're not sure the response is a stream, check the `is_stream_complete` attribute:\nprint(f'Stream complete: {response.is_stream_complete}')\n\n# Close the connection manually\nresponse.close()\n\n# You can also use `response.iter_content` for binary data:\nfor chunk in response.iter_content(chunk_size=1024):\n    print(f'Got"}
{"index": 2, "prompt": "Process streamed bytes in chunks using `iter_content`.", "reference": "import requests\n\nurl = 'https://httpbin.org/bytes/2048' # Get 2KB of random bytes\nbyte_chunks = []\ntotal_bytes = 0\nwith requests.get(url, stream=True) as r:\n    r.raise_for_status()\n    for chunk in r.iter_content(chunk_size=512):\n        byte_chunks.append(chunk)\n        total_bytes += len(chunk)\nprint(f'Received {len(byte_chunks)} chunks, total {total_bytes} bytes.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/100', stream=True)\nchunk_size = 10\nfor chunk in response.iter_content(chunk_size):\n    print(f'Received {len(chunk)} bytes')\n    if len(chunk) < chunk_size:\n        print('Final chunk received')\n        break\n\n# Alternatively, if you don't care about the chunk size, you can use:\nfor chunk in response.iter_content():\n    print(f'Received {len(chunk)} bytes')\n\n# Process bytes as text using response.iter_lines()\n# Note: lines are"}
{"index": 3, "prompt": "Download a file chunk by chunk and save it.", "reference": "import requests\n\nurl = 'https://httpbin.org/image/jpeg' # Example file URL\nfilename = 'downloaded_image.jpeg'\ntry:\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    print(f'File {filename} downloaded successfully.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error downloading file: {e}')\n# Optional: Add import os; os.remove(filename) for cleanup", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/102400') # 100 KB file\n\n# Save 100 KB file in chunks of 10 KB\nwith open('100kb_file.txt', 'wb') as f:\n    for chunk in response.iter_content(chunk_size=10240):\n        f.write(chunk)\n        print(f'Wrote {len(chunk)} bytes')\n\nprint('File download complete')\n\n# Check file size\nimport os\nprint(f'File size: {os.stat(\"10"}
{"index": 4, "prompt": "Example of `requests.patch` method.", "reference": "import requests\n\nurl = 'https://httpbin.org/patch'\ndata = {'field_to_update': 'new_value'}\nresponse = requests.patch(url, data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form data received by PATCH: {response.json().get(\"form\")}')", "output": "import requests\n\ndata = {'key': 'value'}\nresponse = requests.patch('https://httpbin.org/patch', data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Data received: {response.json().get(\"data\")}')\nprint(f'Headers received: {response.headers}')\nif response.ok:\n    print('PATCH request successful.')\nelse:\n    print(f'PATCH request failed. Error: {response.text}')\n\n# Example:\n# import requests\n#\n# data = {'key': 'value'}\n# response = requests.patch('https://http"}
{"index": 5, "prompt": "Use `response.links` to find the 'next' page URL.", "reference": "import requests\n\n# Example with GitHub API (replace with actual URL if testing)\n# url = 'https://api.github.com/users/octocat/repos?per_page=5'\n# response = requests.get(url)\n\n# Simulate a response with links\nclass SimulatedResponse:\n    headers = {'Link': '<https://api.github.com/user/repos?page=2>; rel=\"next\"'}\n    links = {}\n\nresponse = SimulatedResponse()\nresponse.links = requests.utils.parse_header_links(response.headers.get('Link', ''))\n\nif 'next' in response.links:\n    next_url = response.links['next']['url']\n    print(f'The URL for the next page is: {next_url}')\nelse:\n    print('No next page link found.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/links', params={'next': 'https://httpbin.org/get', 'count': 2})\nprint(f'Found {len(response.links)} links in response:')\nfor link_name, link_url in response.links.items():\n    print(f'Link name: {link_name} URL: {link_url}')\n\nif 'next' in response.links:\n    print('Found `next` link, making request...')\n    next_response = requests.get(response.links['next']['url'])\n    print(f'Next response status code:"}
{"index": 6, "prompt": "Verify if response body contains 'httpbin'.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/robots.txt')\nif 'httpbin' in response.text.lower():\n    print('The word \"httpbin\" was found in the response.')\nelse:\n    print('The word \"httpbin\" was not found.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nif 'httpbin' in response.text:\n    print('Body contains \"httpbin\".')\nelse:\n    print('Body does not contain \"httpbin\".')\n\n# You can also check for specific text\nif 'application/json' in response.headers.get('Content-Type', ''):\n    print('Response is JSON.')\nelif 'text/html' in response.headers.get('Content-Type', ''):\n    print('Response is HTML.')\nelse:\n    print('Response is not JSON or HTML.')\n\n# Check for a specific JSON response"}
{"index": 7, "prompt": "Make a GET request combining params, headers, and a timeout.", "reference": "import requests\n\nparams = {'query': 'example', 'limit': 10}\nheaders = {'Accept': 'application/vnd.api+json'}\ntimeout = 5.0 # seconds\n\ntry:\n    response = requests.get('https://httpbin.org/get', params=params, headers=headers, timeout=timeout)\n    response.raise_for_status()\n    print('Request successful.')\n    print('Args received:', response.json()['args'])\n    print('Headers received:', response.json()['headers'])\nexcept requests.exceptions.Timeout:\n    print('Request timed out.')\nexcept requests.exceptions.RequestException as e:\n    print(f'Request failed: {e}')", "output": "import requests\n\nparams = {'q': 'requests'}\nheaders = {'Accept': 'application/json'}\nresponse = requests.get('https://httpbin.org/get', params=params, headers=headers, timeout=5)\nprint(f'Status: {response.status_code}')\nprint(f'Headers: {response.headers}')\nprint(f'Params received by the server: {response.json().get(\"args\")}')\nprint(f'Received timeout: {response.json().get(\"headers\").get(\"X-Request-Timeout\")}')\n\n# Example with timeout exception handling:\ntry:\n    response = requests.get('https://"}
{"index": 8, "prompt": "Send a POST request with JSON data, custom headers, and auth.", "reference": "import requests\nfrom requests.auth import HTTPBasicAuth\n\njson_payload = {'data': 'payload'}\nheaders = {'X-Request-ID': '123-abc'}\nauth = HTTPBasicAuth('testuser', 'testpass')\n\nresponse = requests.post('https://httpbin.org/post', json=json_payload, headers=headers, auth=auth)\n\nprint(f'Status: {response.status_code}')\nprint('Received JSON:', response.json()['json'])\nprint('Received Headers:', response.json()['headers'])\nprint('Received Auth:', response.json().get('args')) # Basic auth info might appear here or need specific endpoint", "output": "import requests\n\nheaders = {'Content-Type': 'application/json'}\ndata = {'key1': 'value1', 'key2': 'value2'}\n\nresponse = requests.post('https://httpbin.org/post', headers=headers, json=data, auth=('user', 'pass'))\nprint(f'Status: {response.status_code}')\nprint(f'JSON Received: {response.json().get(\"json\")}')\nprint(f'Headers Sent: {headers}')\nprint(f'Auth Sent: {(\"user\", \"pass\")}')\nprint('Sent JSON Data:')\nimport json\nprint(json.d"}
{"index": 9, "prompt": "Example of a complex request using multiple requests options.", "reference": "import requests\n\nresponse = requests.request(\n    method='PUT', \n    url='https://httpbin.org/put', \n    params={'update_id': '5'}, \n    json={'status': 'complete'}, \n    headers={'X-Client': 'MyScript'}, \n    timeout=10\n)\n\nprint(f'Status: {response.status_code}')\nprint(response.json())", "output": "import requests\n\n# Create session and set timeout\ns = requests.Session()\ns.timeout = 5 # seconds\n\n# Send initial request to get login csrf token\nlogin_url = 'https://httpbin.org/post'\nlogin_response = s.get(login_url)\nprint(f'Status code for initial request: {login_response.status_code}')\nprint('Initial response text:')\nprint(login_response.text)\n\n# Get csrf token from response\ncsrf_token = login_response.json().get('data')\nprint(f'CSRF token from initial response: {csrf_token}')"}
{"index": 10, "prompt": "POST data as plain text with requests.", "reference": "import requests\n\ndata = 'This is raw text data.'\nheaders = {'Content-Type': 'text/plain'}\n\nresponse = requests.post('https://httpbin.org/post', data=data, headers=headers)\nprint(f'Status: {response.status_code}')\nprint(f'Data received by server: {response.json().get(\"data\")}')", "output": "import requests\n\npayload = 'username=john&password=secret'\nresponse = requests.post('https://httpbin.org/post', data=payload)\nprint(f'Status: {response.status_code}')\nprint('Plain text data received:')\nprint(response.json().get('data'))\nprint('Or use response.request.body:')\nprint(response.request.body)\nprint('Or use response.request.body.decode(\"utf-8\"):')\nprint(response.request.body.decode('utf-8'))\nprint('Or use response.request.headers.get(\"Content-Length\"):')\nprint(response"}
{"index": 11, "prompt": "Send XML data in a POST request.", "reference": "import requests\n\nxml_data = '<message><content>Hello</content></message>'\nheaders = {'Content-Type': 'application/xml'}\n\nresponse = requests.post('https://httpbin.org/post', data=xml_data, headers=headers)\nprint(f'Status: {response.status_code}')\n# httpbin will show the raw string in the 'data' field\nprint(f'Data received: {response.json().get(\"data\")}')", "output": "import requests\n\nxml_data = '<person><name>John</name><age>34</age></person>'\nheaders = {'Content-Type': 'application/xml'}\nresponse = requests.post('https://httpbin.org/post', data=xml_data, headers=headers)\nprint(f'Status: {response.status_code}')\nprint('XML sent:')\nprint(response.json().get('data'))\nprint('Headers received:')\nprint(response.json().get('headers'))\nprint('Headers received (pretty print):')\nprint(response.json().get('headers').get('Content-Type'))\nprint('Form data received"}
{"index": 12, "prompt": "How to send a list of values for a single form key in POST?", "reference": "import requests\n\n# Send multiple values for the key 'items'\npayload = {'items': ['apple', 'banana', 'cherry']}\n\nresponse = requests.post('https://httpbin.org/post', data=payload)\nprint(f'Status: {response.status_code}')\n# Check the 'form' field in the response JSON\nprint(f'Form data received: {response.json().get(\"form\")}')", "output": "import requests\n\nlist_of_values = ['value1', 'value2', 'value3']\nresponse = requests.post('https://httpbin.org/post', data={'key': list_of_values})\nprint(f'Status: {response.status_code}')\nprint('Values received:')\nprint(response.json().get('form').get('key'))\n# Prints: ['value1', 'value2', 'value3']\n\n# Or, using `json`:\nresponse = requests.post('https://httpbin.org/post', json={'key': list_of_values})\nprint(f'Status: {response.status"}
{"index": 13, "prompt": "Pass tuples as data values in requests post.", "reference": "import requests\n\n# Useful for multipart/form-data if needed, but works for simple POST too\ndata = {'file_info': ('report.txt', 'content'), 'metadata': ('key', 'value')}\nresponse = requests.post('https://httpbin.org/post', data=data)\nprint(f'Status: {response.status_code}')\nprint(f'Form received: {response.json().get(\"form\")}')", "output": "import requests\n\ndata = ('username', 'myusername')\nresponse = requests.post('https://httpbin.org/post', data=data)\nprint(f'Status: {response.status_code}')\nprint('Data received:')\nprint(response.json().get('data')) # Access the data sent by the server\nprint('Form data received:')\nprint(response.json().get('form'))\n\n# Alternatively, pass as dict\ndata = {'username': 'myusername'}\nresponse = requests.post('https://httpbin.org/post', data=data)\nprint(f'Status: {response.status_code}')\nprint('Data"}
{"index": 14, "prompt": "Check if a response was a redirect.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1')\nif response.history: # History list is non-empty if redirects occurred\n    print('Request was redirected.')\n    print(f'Final URL: {response.url}')\n    print(f'Original status code: {response.history[0].status_code}')\nelse:\n    print('Request was not redirected.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1') # Redirect to itself\nprint(f'Redirected? {response.history}')\nif response.history:\n    print(f'Final URL: {response.url}')\n    print(f'Final status: {response.status_code}')\n    print(f'Final content: {response.text}')\nelse:\n    print('No redirects')\n    print(f'Final status: {response.status_code}')\n    print(f'Final content: {response.text}')"}
{"index": 15, "prompt": "Verify if the final response URL is different from the initial request URL.", "reference": "import requests\n\ninitial_url = 'https://httpbin.org/absolute-redirect/2'\nresponse = requests.get(initial_url)\n\nif response.url != initial_url:\n    print(f'Redirect occurred. Initial URL: {initial_url}, Final URL: {response.url}')\nelse:\n    print('No redirect occurred.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/get')\nprint(f'Initial URL: {response.request.url}')\nfinal_url = response.url\nprint(f'Final URL: {final_url}')\nif final_url == response.request.url:\n    print('URL did not change during request.')\nelse:\n    print('URL was redirected during request.')\n# print(f'Final response: {response.text}')\n\n# Example with a redirect:\n# import requests\n#\n# response = requests.get('https://httpbin.org/redirect/1')\n# print(f'"}
{"index": 16, "prompt": "Use `response.is_redirect` property.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect-to?url=https://example.com', allow_redirects=False)\n# Need allow_redirects=False to check the intermediate response\nif response.is_redirect:\n    print(f'Response is a redirect (Status: {response.status_code})')\n    print(f'Location header points to: {response.headers.get(\"Location\")}')\nelse:\n    print('Response is not a redirect.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/1')\nprint(f'Is redirect: {response.is_redirect}')\nif response.is_redirect:\n    print(f'Final location: {response.url}')\n    print(f'Final status: {response.status_code}')\nelse:\n    print('Not a redirect.')\n\n# Example 2: Using `is_permanent_redirect`\ntry:\n    response = requests.get('https://httpbin.org/redirect/1', allow_redirects=False)\n    print(f'Is permanent redirect: {response.is_"}
{"index": 17, "prompt": "Check if a redirect is permanent (301, 308).", "reference": "import requests\n\n# Need allow_redirects=False to check the intermediate response\nresponse = requests.get('https://httpbin.org/status/301', allow_redirects=False) \nif response.is_permanent_redirect:\n    print(f'Response is a permanent redirect (Status: {response.status_code})')\nelse:\n    print(f'Response is not a permanent redirect (Status: {response.status_code})')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/redirect/3')\nif response.is_permanent_redirect:\n    print('Permanent redirect received.')\nelse:\n    print('Temporary redirect received.')\nprint(f'Status code: {response.status_code}')\n\n# Example: Check if a request is successful (200-299)\ntry:\n    response = requests.get('https://httpbin.org/get')\n    if response.status_code >= 200 and response.status_code < 300:\n        print('Request successful.')\n    else"}
{"index": 18, "prompt": "How to prepare a request without sending it using requests?", "reference": "import requests\n\nrequest = requests.Request('GET', 'https://httpbin.org/get', params={'key': 'val'}, headers={'X-Custom': 'Prep'}) \nprepared = request.prepare()\n\nprint('Prepared Request Details:')\nprint(f'Method: {prepared.method}')\nprint(f'URL: {prepared.url}')\nprint(f'Headers: {prepared.headers}')\nprint(f'Body: {prepared.body}')", "output": "import requests\n\nprepared_request = requests.Request('GET', 'https://httpbin.org/get')\nprepared_request = prepared_request.prepare()\nprint(f'Prepared request: {prepared_request}')\nprint('Not sending request.')\n\n# Example: Custom headers\ncustom_headers = {'X-Custom-Header': 'Custom Value'}\nprepared_request = requests.Request('GET', 'https://httpbin.org/get', headers=custom_headers)\nprepared_request = prepared_request.prepare()\nprint(f'Custom header: {prepared_request.headers.get(\"X-Custom-Header\")}"}
{"index": 19, "prompt": "Use a Session to prepare a request object.", "reference": "import requests\n\nsession = requests.Session()\nsession.headers.update({'User-Agent': 'MySessionAgent'}) # Session headers\n\nreq = requests.Request('POST', 'https://httpbin.org/post', json={'data': 1})\nprepared_req = session.prepare_request(req)\n\nprint('Prepared Request (via Session):')\nprint(f'URL: {prepared_req.url}')\nprint(f'Headers: {prepared_req.headers}') # Will include session headers\nprint(f'Body: {prepared_req.body}')", "output": "import requests\n\nwith requests.Session() as s:\n    s.headers.update({'X-Custom-Header': 'custom value'})\n    r = s.get('https://httpbin.org/headers')\n    print(f'Session headers: {r.json()[\"headers\"][\"X-Custom-Header\"]}')\n    print(f'Request headers: {r.request.headers.get(\"X-Custom-Header\")}')\n\n# Session is closed here, so no more headers can be added.\ntry:\n    s.headers.update({'X-Custom-Header': 'custom value 2'})\nexcept AttributeError:\n    print"}
{"index": 20, "prompt": "Manually create and send a PreparedRequest with a Session.", "reference": "import requests\n\ns = requests.Session()\nreq = requests.Request('GET', 'https://httpbin.org/get', headers={'X-Manual': 'Send'}) \nprepped = s.prepare_request(req)\n\n# Now send the prepared request\nresponse = s.send(prepped, timeout=5)\n\nprint(f'Status Code: {response.status_code}')\nprint(response.json()['headers'])", "output": "import requests\n\nurl = 'https://httpbin.org/post'\ndata = {'foo': 'bar'}\nheaders = {'Content-Type': 'application/json'}\n\nwith requests.Session() as s:\n    prepared_request = requests.Request('POST', url, json=data).prepare()\n    prepared_request.headers.update(headers)\n    response = s.send(prepared_request)\n    print(f'Status: {response.status_code}')\n    print(f'JSON response: {response.json()}')\n    print(f'Headers sent: {prepared_request.headers}')\n\n# Example output:\n#"}
{"index": 21, "prompt": "Check a specific header value in the response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/response-headers?Server=MyCustomServer/1.0')\nserver_header = response.headers.get('Server')\nprint(f'Server header value: {server_header}')\nif server_header == 'MyCustomServer/1.0':\n    print('Server header matches expected value.')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/get', headers={'Accept': 'application/json'})\nprint(f'Accept header: {response.request.headers.get(\"Accept\")}')\nif response.request.headers.get('Accept') == 'application/json':\n    print('Request accepted JSON')\nelse:\n    print('Request did not accept JSON')\nprint(f'Final request header Accept: {response.request.headers.get(\"Accept\")}') # Not sent with the request\nprint(f'Final response header Content-Type: {response.headers.get(\"Content-Type\")}')\nif response.headers."}
{"index": 22, "prompt": "Verify the Content-Type of a response.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/image/png')\nexpected_content_type = 'image/png'\nactual_content_type = response.headers.get('Content-Type', '').lower()\n\nif actual_content_type == expected_content_type:\n    print(f'Content-Type is correct: {actual_content_type}')\nelse:\n    print(f'Unexpected Content-Type. Expected: {expected_content_type}, Got: {actual_content_type}')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/xml')\nprint(f'Status Code: {response.status_code}')\nprint(f'Content-Type: {response.headers.get(\"Content-Type\")}')\nif response.headers.get('Content-Type') == 'application/xml':\n    print('Response is XML')\nelse:\n    print('Response is not XML')\nprint('Full response:', response.text)\n\n# Validate that the response is XML:\n# import xml.etree.ElementTree as ET\n# try:\n#     root = ET.fromstring(response.text)"}
{"index": 23, "prompt": "How to get the raw socket response (advanced)?", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/get', stream=True)\n\ntry:\n    # Access the underlying urllib3 response\n    raw_response = response.raw\n    # You can read directly from raw_response, but requests handles encoding/decompression better\n    print(f'Underlying raw response object: {type(raw_response)}')\n    # Example: Read a small amount of raw data\n    # raw_data = raw_response.read(100)\n    # print(f'Raw data sample (first 100 bytes): {raw_data}')\nfinally:\n    # Important to release the connection if using raw\n    if 'raw_response' in locals():\n        raw_response.release_conn()", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/get', headers={'Accept': 'application/octet-stream'})\nprint(f'Status Code: {response.status_code}')\nprint(f'Raw Content-Type: {response.headers.get(\"Content-Type\")}')\nprint('Received raw bytes:')\nprint(response.content)\n# Note: To print the content as text, you can decode the response bytes:\n# print(response.content.decode())\n# Note: To print the content as JSON, you can load the response as JSON:\n# import json\n# print(json.dumps(json.loads"}
{"index": 24, "prompt": "Force requests to use a specific encoding for response text.", "reference": "import requests\n\nresponse = requests.get('https://httpbin.org/bytes/100') # Get raw bytes\nprint(f'Original detected encoding: {response.encoding}')\n\n# Force encoding (example assumes the bytes are actually valid UTF-8)\nresponse.encoding = 'utf-8'\n\ntry:\n    text_content = response.text\n    print(f'Text content after forcing encoding to {response.encoding}:')\n    # print(text_content) # This might fail if bytes aren't valid UTF-8\n    print('[Text content processed]')\nexcept UnicodeDecodeError as e:\n    print(f'Forcing encoding failed: {e}')", "output": "import requests\n\nresponse = requests.get('https://httpbin.org/encoding/utf8')\nprint(f'Encoding: {response.encoding}')\nprint(f'Text (should be UTF-8): {response.text}')\n\n# Force response encoding to 'iso-8859-1'\nresponse.encoding = 'iso-8859-1'\nprint(f'Forced encoding: {response.encoding}')\nprint(f'Text (should be ISO-8859-1): {response.text}')\n\n# Or set encoding in request\nresponse = requests.get('https://httpbin.org/encoding/utf"}
